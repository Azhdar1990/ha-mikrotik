/system script run [find name="ha_config"]
:global haPassword
:global haInterface
:global haMacA
:global haMacB
:global haNetmaskBits
:global haAddressOther
:global isMaster
:global haMacOther

:if ([:len [/interface find where default-name="$haInterface" name="$haInterface"]] != 1) do={
   :error "Unable to find interface named $haInterface with default-name that matches name. Make sure you don't rename these interfaces, leave default-name as-is."
}

:local mac [[/interface ethernet get [find default-name="$haInterface"] orig-mac-address]]
:if ($mac != $haMacA and $mac != $haMacB) do={
   :error "Interface $haInterface MAC $mac does not match (A=$haMacA or B=$haMacB) - please check config\r\nUse orig-mac address!"
}

:local pingMac $haMacA
:if ($mac = $haMacA) do={
   :set pingMac $haMacB
}

:put $mac
:put $pingMac

:if ([/ping $pingMac count=1] = 0) do={
   :error "Are you sure the other device is configured properly? I am unable to ping MAC $pingMac"
}

:if ([:len [/ip address find where interface="$haInterface" and comment!="HA_AUTO"]] > 0) do={
   :error "Interface $haInterface has IP addresses. HA should completely own the interface and it cannot be used by anything else. Please correct"
}

:if ([:len [/file find name=HA_backup_beforeHA.backup]] = 0) do={
   system backup save name=HA_backup_beforeHA dont-encrypt=yes
   /export file=HA_backup_beforeHA.rsc
}

:if (!$isMaster) do={
   :put "I am not master - running ha_startup first"
   :global haAllowBootstrap
   :set haAllowBootstrap true
   /system script run "ha_startup"
} else={
   :put "I am already master! Skipping my own bootstrap..."
}

:put "###"
:put "#Maybe try: /tool mac-telnet $haMacOther"
:put "###PASTE THIS ON THE OTHER DEVICE - YOUR CONFIG WILL BE RESET AND LOST!!!###"
:put ":global mac [[/interface ethernet get [find default-name=\"$haInterface\"] orig-mac-address]]"
:put ":if (\$mac != \"$haMacA\" and \$mac != \"$haMacB\") do={"
:put "   :error \"Interface $haInterface MAC \$mac does not match (A=$haMacA or B=$haMacB) - please check config\\r\\nUse orig-mac address!\""
:put "}"
#Try to backup the local device before HA, just in case.
:put ":if ([:len [/file find name=HA_backup_beforeHA.backup]] = 0) do={"
:put "   /system backup save name=HA_backup_beforeHA dont-encrypt=yes"
:put "   /export file=HA_backup_beforeHA.rsc"
:put "}"
#Oh this is ridicullous, we can't create a file that doesn't end in .txt any other way. Use export to create a rsc file extension.
:put "/export file=flash/HA_bootstrap.rsc"
#Seems to be a race condition between the export and the visibility, delay a bit.
:put "/delay 2"
:put "/file print file=flash/HA_bootstrap.rsc"
#Need delays here similar to ha_startup, sometimes the interfaces arent ready when this runs.
:put "/file set [find name=flash/HA_bootstrap.rsc] contents=\":local haBootstrapOK false; :while (!\\\$haBootstrapOK) do={:do { /ip address add address=\\\"$haAddressOther/$haNetmaskBits\\\" interface=$haInterface; /user add name=ha group=full password=\\\"$haPassword\\\"; :set haBootstrapOK true;} on-error={/log warning \\\"ha_startup: 0.0 B bootstrap failed...waiting\\\"; :delay 5};}\""
:put "/system reset-configuration no-defaults=yes keep-users=no skip-backup=yes run-after-reset=flash/HA_bootstrap.rsc"
:put "###END OF PASTE FOR OTHER DEVICE###"
:put "###"
